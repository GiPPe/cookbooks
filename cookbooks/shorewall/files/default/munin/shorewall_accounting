#!/usr/bin/python
import os, sys, re
import commands

PLUGIN_BASE_NAME = "shorewall_accounting_"
ACCOUNTING_LINE_EXP = re.compile(r"^\s*\d+\s+(?P<bytes>\d+)\s+(?P<target>\w+)\s+(?P<prot>\w+)\s+(?P<opt>[\w-]+)\s+(?P<in>[\w*]+)\s+(?P<out>[\w*]+)\s+(?P<source>[\w./+-]+)\s+(?P<destination>[\w./+-]+)\s*$")

def get_bits_by_chain(chain):
    status, output = commands.getstatusoutput("shorewall -x show accounting")

    if status != 0:
        raise OSError("Error running command (%s)[%i]: %s" % (trafficCmd, status, output))

    inb = outb = 0

    for line in output.splitlines():
        m = ACCOUNTING_LINE_EXP.match(line)

        if m is not None:
            gd = m.groupdict()

            if chain and gd['target'] != chain:
                continue

            if gd['source'] == '0.0.0.0/0':
                inb += int(gd['bytes'])

            elif gd['destination'] == '0.0.0.0/0':
                outb += int(gd['bytes'])

    return (inb, outb)

call_name = os.path.basename(sys.argv[0])
if call_name.startswith(PLUGIN_BASE_NAME):
    chain = "act_" + call_name[len(PLUGIN_BASE_NAME):]
else:
    chain = None

if len(sys.argv) > 1:
    if sys.argv[1] == "autoconf":
        print "yes"
        sys.exit(0)
    elif sys.argv[1] == "config":
        if chain:
            print "graph_title Traffic in chain %s" % (chain[4:],)
        else:
            print "graph_title Traffic in all chains"
        print "graph_order down up"
        print "graph_args --base 1000"
        print "graph_vlabel bits in (-) / out (+) per ${graph_period}"
        print "graph_category network"
        print "down.label received"
        print "down.type COUNTER"
        print "down.graph no"
        print "down.cdef down,8,*"
        print "up.label bps"
        print "up.type COUNTER"
        print "up.negative down"
        print "up.cdef up,8,*"
        sys.exit(0)

inb, outb = get_bits_by_chain(chain)
print "down.value %i" % (inb,)
print "up.value %i" % (outb,)

# vim: set et:
