#!/bin/bash

# List of DBNAMES for Daily/Weekly Backup e.g. "DB1 DB2 DB3"
DBNAMES="<%= @dbnames %>"

# List of DBBNAMES for Monthly Backups.
MDBNAMES="mysql $DBNAMES"

# Backup directory location e.g /backups
BACKUPDIR="<%= @backupdir %>"

# What would you like to be mailed to you?
# - log    : send only log file
# - stdout : will simply output the log to the screen if run manually
# - quiet  : Only send logs if an error occurs
MAILCONTENT="quiet"

# Email Address to send mail to? (user@domain.com)
MAILADDR="<%= node[:contacts][:hostmaster] %>"

# List of DBNAMES to EXLUCDE if DBNAMES are set to all (must be in " quotes)
DBEXCLUDE="<%= @dbexclude %>"

# list of tables to ignore
TABIGNORE="<%= @tabignore %>"

# which day do you want weekly backups? (1 to 7 where 1 is Monday)
DOWEEKLY=6

# options for mysqldump
OPTS="<%= @opts %>"

PATH=/usr/bin:/bin

DATE=$(date +%Y-%m-%d_%Hh%Mm)   # Datestamp e.g 2002-09-21
DOW=$(date +%A)                 # Day of the week e.g. Monday
DNOW=$(date +%u)                # Day number of the week 1 to 7 where 1 represents Monday
DOM=$(date +%d)                 # Date of the Month e.g. 27
M=$(date +%B)                   # Month e.g January
W=$(date +%V)                   # Week Number e.g 37

HOST=$(hostname -f)

LOGFILE=$BACKUPDIR/$(date +%N).log
LOGERR=$BACKUPDIR/$(date +%N).err

# create required directories
mkdir -p "$BACKUPDIR"
mkdir -p "$BACKUPDIR/daily"
mkdir -p "$BACKUPDIR/weekly"
mkdir -p "$BACKUPDIR/monthly"

# IO redirection for logging.
touch $LOGFILE
exec 6>&1           # Link file descriptor #6 with stdout.
                    # Saves stdout.
exec > $LOGFILE     # stdout replaced with file $LOGFILE.
touch $LOGERR
exec 7>&2           # Link file descriptor #7 with stderr.
                    # Saves stderr.
exec 2> $LOGERR     # stderr replaced with file $LOGERR.

# if backing up all DBs on the server
if [ "$DBNAMES" = "all" ]; then
	DBNAMES="$(mysql --batch --skip-column-names -e "show databases"| sed 's/ /%/g')"

	# if DBs are excluded
	for exclude in information_schema $DBEXCLUDE; do
		DBNAMES=$(echo $DBNAMES | sed "s/\b$exclude\b//g")
	done

	MDBNAMES=$DBNAMES
fi

# list of tables to ignore
for TAB in $TABIGNORE; do
	OPTS="$OPTS --ignore-table $TAB"
done

# dump & compress function
dbdump() {
	mysqldump $OPTS $1 > $2
	gzip -f $2 2>&1
	return 0
}

echo "==============================================================="
echo "Backup of Database Server at $HOST"
echo "==============================================================="
echo "Backup Start Time: $(date)"
echo "==============================================================="

# monthly full backup of all databases
if [ $DOM = "01" ]; then
	echo "Starting monthly backup:"
	for MDB in $MDBNAMES; do
		MDB="${MDB/\%/ }"
		echo "   - $MDB"
		mkdir -p "$BACKUPDIR/monthly/$MDB"
		dbdump "$MDB" "$BACKUPDIR/monthly/$MDB/${MDB}_$DATE.$M.$MDB.sql"
	done
	echo
fi

if [ $DNOW = $DOWEEKLY ]; then
	echo "Starting weekly backup:"
else
	echo "Starting daily backup:"
fi

for DB in $DBNAMES; do
	# prepare $DB for using
	DB="$(echo $DB | sed 's/%/ /g')"
	echo "   - $DB"

	# create seperate directory for each DB
	mkdir -p "$BACKUPDIR/daily/$DB"
	mkdir -p "$BACKUPDIR/weekly/$DB"

	# weekly backup
	if [ $DNOW = $DOWEEKLY ]; then
		if [ "$W" -le 05 ]; then
			REMW=$(expr 48 + $W)
		elif [ "$W" -lt 15 ]; then
			REMW=0$(expr $W - 5)
		else
			REMW=$(expr $W - 5)
		fi

		eval rm -fv "$BACKUPDIR/weekly/$DB/${DB}_week.$REMW.*"
		dbdump "$DB" "$BACKUPDIR/weekly/$DB/${DB}_week.$W.$DATE.sql"

	# daily backup
	else
		eval rm -fv "$BACKUPDIR/daily/$DB/*.$DOW.sql.*"
		dbdump "$DB" "$BACKUPDIR/daily/$DB/${DB}_$DATE.$DOW.sql"
	fi
done

echo "==============================================================="
echo "Backup End Time:  $(date)"
echo "==============================================================="
echo
echo "Total disk space used for backup storage: $(du -sh "$BACKUPDIR"|awk '{print $1}')"

# clean up IO redirection
exec 1>&6 6>&-      # Restore stdout and close file descriptor #6.
exec 1>&7 7>&-      # Restore stdout and close file descriptor #7.

if [ "$MAILCONTENT" = "log" ]; then
	cat "$LOGFILE" | mail -s "MySQL Backup Log for $HOST - $DATE" $MAILADDR
	if [ -s "$LOGERR" ]; then
		cat "$LOGERR" | mail -s "ERRORS REPORTED: MySQL Backup error Log for $HOST - $DATE" $MAILADDR
	fi
elif [ "$MAILCONTENT" = "quiet" ]; then
	if [ -s "$LOGERR" ]; then
		cat "$LOGERR" | mail -s "ERRORS REPORTED: MySQL Backup error Log for $HOST - $DATE" $MAILADDR
		cat "$LOGFILE" | mail -s "MySQL Backup Log for $HOST - $DATE" $MAILADDR
	fi
else
	if [ -s "$LOGERR" ]; then
		cat "$LOGFILE"
		echo
		echo "###### WARNING ######"
		echo "Errors reported during AutoMySQLBackup execution.. Backup failed"
		echo "Error log below.."
		cat "$LOGERR"
	else
		cat "$LOGFILE"
	fi
fi

if [ -s "$LOGERR" ]; then
	STATUS=1
else
	STATUS=0
fi

# clean up logfile
rm -f "$LOGFILE"
rm -f "$LOGERR"

exit $STATUS
